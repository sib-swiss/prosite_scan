#!/usr/local/bin/perl
#
# Author: Kay Hofmann (khofmann@isrec-sun1.unil.ch) December 1994
#
# This program performs regional shuffling on all sequences in a
# FASTA- or EMBL formatted database.
# The shuffled sequence(s) will be written in FASTA-format to the 
# standard output
#
# The call syntax is:
#        dbshuffle [options] sequencefile
#
#        valid options are:
# 
#        -rXX : regional shuffling with a window of XX
#

$region=0;

##################################################################
# get sequence in any format and put it into Seq, SeqID and SeqDE
##################################################################

sub getseq {
    
    $Seq  ='';
    $SeqID='';
    $SeqDE='';
    
    if    ($format eq "FASTA") {
      &getfasta;
      $Seq   = $fastabuffer;
      $SeqID = $FastaID;
      $SeqDE = $FastaDE;
    }
    elsif ($format eq "EMBL")  {
      &getembl;
      $Seq   = $emblbuffer;
      $SeqID = $EmblID;
      $SeqDE = $EmblDE;
    }
    else                       {
      &getgcg;
      $Seq   = $gcgbuffer;
      $SeqID = $gcgid;
      $SeqDE = $gcgde;
    }
  }
  
###################################################################
# read Pearson/FASTA format sequence (not to be called externally) 
###################################################################
  
  sub getfasta {
    $fastabuffer="";
    $FastaID="";
    $FastaDE="";
    $line="";
    until (($fastaline =~ /^\>/) || eof(SEQFILE)) {$fastaline=<SEQFILE>};
    if ($fastaline=~/^\>(\S+)\s(.*)$/) {
      $FastaID=$1;
      $FastaDE=$2;
    }
    until (($line =~ /^\>/) || eof(SEQFILE)) {
      $line=<SEQFILE>;
      if (!($line =~ /^\>/)) {$fastabuffer .= $line}
    }
    if ($line =~ /^\>/) {$fastaline=$line}
    else {$fastaline=""};
    $fastabuffer =~ tr/a-z/A-Z/;
    $fastabuffer =~ s/[^A-Z]//g;
  }

###################################################################
# read EMBL/Swissprot format sequence (not to be called externally) 
###################################################################
    
  sub getembl {
    $emblbuffer="";
    $EmblID="";
    $EmblDE="";
    $line="";
    until (($line =~ /^ID\s/) || eof(SEQFILE)) {$line=<SEQFILE>};
    if ($line=~/^ID\s+(\w+).*$/)          {$EmblID=$1;}
    until (($line =~ /^SQ\s/) || eof(SEQFILE)) {
      $line=<SEQFILE>;
      if ($line =~ /^DE\s+(.*)/) {
        if($EmblDE) {$EmblDE.=" "};
	$EmblDE .= $1
      }
    }
    if ($line =~ /^SQ\s/) {
      until (($line =~ /^\/\//) || eof(SEQFILE)) {
        $line=<SEQFILE>;
        if   (!($line =~ /^\/\//)) {$emblbuffer .= $line}
      }
    }
    $emblbuffer =~ tr/a-z/A-Z/;
    $emblbuffer =~ s/[^A-Z]//g;
  }
    
###################################################################
# read GCG format sequence (not to be called externally) 
###################################################################
  
  sub getgcg {
    $gcgbuffer="";
    $gcgid="";
    $line="";
    until (($line =~ /\.\./) || eof(SEQFILE)) {$line=<SEQFILE>};
    if ($line=~/^(\w*).*\.\./)                {$gcgid=$1;}
    until (eof(SEQFILE)) {
      $line=<SEQFILE>;
      $gcgbuffer .= $line
    }
    $gcgbuffer =~ tr/a-z/A-Z/;
    $gcgbuffer =~ s/[^A-Z]//g;
  }

###################################################################
# A segment is shuffled
###################################################################
  
  sub do_shuffle {
    $return='';
    @residues = split(//,$_[0]);
    while ($#residues >=0 ) {
      $pos=int(rand($#residues+1));
      $return.=splice(@residues,$pos,1);
    }
  $return;
  }
    
# --------- Program starts here -----------------------------------

  srand;
 
###################################################################
# test command line arguments and open files:
###################################################################
  
  while ($ARGV[0]=~/^-/) {
    $agm = shift(@ARGV);
    if($agm=~/r(\d+)/) {
      $region=$1
    };
  }

  if($#ARGV!=0)        {die "SYNTAX: dbshuffle [ -rXX ] sequencefile\n"};
  unless (-T $ARGV[0]) {die "$ARGV[0] no valid input file\n"};  
  open(SEQFILE,"$ARGV[0]")   || die "can't open $ARGV[0]: $!\n";


###################################################################
# determine sequence file format
###################################################################

  $line=<SEQFILE>;
  if    ($line =~ /^\>/)        {$format="FASTA"}
  elsif ($line =~ /^ID\s/)      {$format="EMBL"}
  else  {
    while (!($line =~ /\.\./) && ($line=<SEQFILE>)) {}
    if ($line=~/\.\./)      {$format="GCG"}
    else {die "Sequence format not recognized\n"}
  }
  close(SEQFILE);
  open(SEQFILE,"$ARGV[0]")   || die "can't reopen $ARGV[0]: $!\n";

###################################################################
# the main program
###################################################################

  until (eof(SEQFILE)){
    &getseq;
    @segments='';                        #reset the list for each sequence
    
    $seqlen = length($Seq);
    if ($seqlen == 0) {next};
    if ($region == 0) {$region=$seqlen}  # default region: whole sequence

    $pat="\\w\{$region\}";               # the sequence is split into regions
    while ($Seq =~ /($pat)(.*)/) {
      push (@segments,$1);               # the regions are added to a list
      $Seq = $2;
    }
    if($Seq) {
      push (@segments,$Seq);
    }

    $outseq="";
    foreach $piece (@segments) {       # each region is shuffled separately
      $outpiece = &do_shuffle($piece);
      $outseq.=$outpiece;              # and appended to the output sequence
    }
    print ">$SeqID","_shu\n";          # sequence is written in FASTA format
    while (length($outseq) > 60) {
       $line  = substr($outseq,0,60);
       $outseq   = substr($outseq,60);
       print "$line\n";
    }
    print "$outseq\n";
  } 
