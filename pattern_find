#!/usr/local/bin/perl
#
# Author: Kay Hofmann (khofmann@isrec-sun1.unil.ch) November 1994
#
# This program scans a protein sequence or database with a pattern -
# either a regular expression in PERL syntax, or a PROSITE-pattern.
# supported sequence formats are: 
# EMBL : single or multiple sequences 
# FASTA: single or multiple sequences
# GCG  : single sequences
#
# The call syntax is:
#        prosite_scan [-h][-p][-s | -S] 'pattern' sequencefile
#
#        single quotes around the pattern are necessary if the pattern
#        involves 'strange' characters
# 
#        -h : HTML output will be created
#        -p : interpret the pattern as PROSITE pattern
#        -s : get pattern sequences in FASTA format
#        -S : get total sequences in FASTA format
#

$http_dat = 'HREF="http://expasy.hcuge.ch/cgi-bin/get-prosite-entry?';
$http_doc = 'HREF="http://expasy.hcuge.ch/cgi-bin/get-prodoc-entry?';

$htmlmode=0;
$prositemode=0;
$patseqmode=0;
$allseqmode=0;

##################################################################
# convert the PROSITE pattern $pattern into a regular expression
##################################################################

  sub convert_pattern{
    
    if ($pattern =~ /\.$/) {chop $pattern} #remove terminating '.' 
    $newpa = '';
    
    while($pattern) {
      ($part,$pattern) = split(/-/,$pattern,2);
      $beginflag=0;
      $endflag=0;
      $newpart='';
      
      if ($part =~ /^(\S+)\((\d+),(\d+)\)$/) {   # find xxx(n1,n2) 
        $mincount=$2;
	$maxcount=$3;
	$part=$1;
      }
      elsif ($part =~ /^(\S+)\((\d+)\)$/) {      # find xxx(n1)
        $mincount=$2;
	$maxcount=$2;
	$part=$1;
      }
      else {
        $mincount=1;
	$maxcount=1;
      }
      
      if ($part =~ /^\<(\S*)$/) {                # find <xxx
        $beginflag=1;
	$part=$1;
      }
      if ($part =~ /^(\S*)\>$/) {                # find xxx>
        $endflag=1;
	$part=$1;
      }
    
      if ($beginflag)                 {$newpart='^'};    
      
      if ($part eq 'X')               {$newpart .= '.'}     # find x
      elsif ($part=~/^[A-Z]$/)        {$newpart .= $part}   # find single res.
      elsif ($part=~/^\[[A-Z]*\]$/)   {$newpart .= $part}   # find [xxx]
      elsif ($part=~/^\{([A-Z]*)\}$/) {$newpart .= "[^$1]"} # find {xxx}
      else {warn "invalid pattern part $part\n"};
      
      if (($mincount!=1) || ($maxcount!=1)) {
        if ($mincount==$maxcount)     {$newpart .= "{$mincount}"}
	else                          {$newpart .= "{$mincount,$maxcount}" };
      }
      
      if ($endflag)                   {$newpart .= '$'};    
    
      $newpa .= $newpart;
    }
    $pattern=$newpa;
  }

##################################################################
# get sequence in any format and put it into Seq, SeqID and SeqDE
##################################################################

sub getseq {
    if    ($format eq "FASTA") {
      &getfasta;
      $Seq   = $fastabuffer;
      $SeqID = $FastaID;
      $SeqDE = $FastaDE;
    }
    elsif ($format eq "EMBL")  {
      &getembl;
      $Seq   = $emblbuffer;
      $SeqID = $EmblID;
      $SeqDE = $EmblDE;
    }
    else                       {
      &getgcg;
      $Seq   = $gcgbuffer;
      $SeqID = $gcgid;
      $SeqDE = $gcgde;
    }
  }
  
###################################################################
# read Pearson/FASTA format sequence (not to be called externally) 
###################################################################
  
  sub getfasta {
    $fastabuffer="";
    $FastaID="";
    $FastaDE="";
    $line="";
    until (($fastaline =~ /^\>/) || eof(SEQFILE)) {$fastaline=<SEQFILE>};
    if ($fastaline=~/^\>(\S+)\s(.*)$/) {
      $FastaID=$1;
      $FastaDE=$2;
    }
    until (($line =~ /^\>/) || eof(SEQFILE)) {
      $line=<SEQFILE>;
      if (!($line =~ /^\>/)) {$fastabuffer .= $line}
    }
    if ($line =~ /^\>/) {$fastaline=$line}
    else {$fastaline=""};
    $fastabuffer =~ tr/a-z/A-Z/;
    $fastabuffer =~ s/[^A-Z]//g;
  }

###################################################################
# read EMBL/Swissprot format sequence (not to be called externally) 
###################################################################
    
  sub getembl {
    $emblbuffer="";
    $EmblID="";
    $EmblDE="";
    $line="";
    until (($line =~ /^ID\s/) || eof(SEQFILE)) {$line=<SEQFILE>};
    if ($line=~/^ID\s+(\w+).*$/)          {$EmblID=$1;}
    until (($line =~ /^SQ\s/) || eof(SEQFILE)) {
      $line=<SEQFILE>;
      if ($line =~ /^DE\s+(.*)/) {
        if($EmblDE) {$EmblDE.=" "};
	$EmblDE .= $1
      }
    }
    if ($line =~ /^SQ\s/) {
      until (($line =~ /^\/\//) || eof(SEQFILE)) {
        $line=<SEQFILE>;
        if   (!($line =~ /^\/\//)) {$emblbuffer .= $line}
      }
    }
    $emblbuffer =~ tr/a-z/A-Z/;
    $emblbuffer =~ s/[^A-Z]//g;
  }
    
###################################################################
# read GCG format sequence (not to be called externally) 
###################################################################
  
  sub getgcg {
    $gcgbuffer="";
    $gcgid="";
    $line="";
    until (($line =~ /\.\./) || eof(SEQFILE)) {$line=<SEQFILE>};
    if ($line=~/^(\w*).*\.\./)                {$gcgid=$1;}
    until (eof(SEQFILE)) {
      $line=<SEQFILE>;
      $gcgbuffer .= $line
    }
    $gcgbuffer =~ tr/a-z/A-Z/;
    $gcgbuffer =~ s/[^A-Z]//g;
  }

###################################################################
# write the sequence in $Seq (and $SeqID) in FASTA-format to STDOUT
###################################################################
  
  sub print_seq {
   if ($SeqID =~ /.*\|([^|]+)$/) {$SeqID=$1};
   print  ">$SeqID\n";
   while (length($Seq) > 60) {
      $sline  = substr($Seq,0,60);
      $Seq    = substr($Seq,60);
      print "$sline\n";
   }
   print "$Seq\n";
  }


# --------- Program starts here -----------------------------------

###################################################################
# parse command line arguments and open files:
###################################################################
  
  while ($ARGV[0]=~/^-/) {
   $agm = shift(@ARGV);
   if($agm=~/h/) {$htmlmode=1};
   if($agm=~/p/) {$prositemode=1};
   if($agm=~/s/) {$patseqmode=1};
   if($agm=~/S/) {$allseqmode=1};
  }
  if($allseqmode) {$patseqmode=0};

  if($#ARGV!=1)        {die "SYNTAX: pattern_find  [options] pattern seq_file\n"};
  unless (-s $ARGV[1]) {die "$ARGV[1] no valid input file\n"};  
  open(SEQFILE,"$ARGV[1]")   || die "can't open $ARGV[1]: $!\n";
  
  $pattern=$ARGV[0];
  $pattern =~ tr/a-z/A-Z/;               #render to uppercase
  if($prositemode) {&convert_pattern};   #convert to regular expression

  if ($htmlmode) {print "<pre>\n"};

###################################################################
# determine sequence file format
###################################################################

  $line=<SEQFILE>;
  if    ($line =~ /^\>/)        {$format="FASTA"}
  elsif ($line =~ /^ID\s/)      {$format="EMBL"}
  else  {
    while (!($line =~ /\.\./) && ($line=<SEQFILE>)) {}
    if ($line=~/\.\./)      {$format="GCG"}
    else {die "Sequence format not recognized\n"}
  }
  close(SEQFILE);
  open(SEQFILE,"$ARGV[1]")   || die "can't reopen $ARGV[1]: $!\n";


###################################################################
# scan the patterns for each sequence found in file
###################################################################

  do {
    &getseq;
    if ($Seq) {
      @matches=();
      $newpos=1;
      while ($Seq =~ /$pattern/g) {
	$pos=$newpos+length($`);
	$newpos=$pos+length($&);
	$pos="$pos";
	while(length($pos)<=10) {$pos .= " "};
	$match="$pos $&";
        push(@matches,$match);
      }
      if(@matches) {
        $occur=$#matches+1;
	if ($patseqmode || $allseqmode) {
	# just do nothing....
	}
	elsif ($htmlmode) {
          print "<B><B>$SeqID  $SeqDE</B></B>\n";
          print "<B>Occurences: $occur</B>\n"; 
	}
	else {
          print "Sequence  : $SeqID $SeqDE\n";
          print "Occurences: $occur\n"; 
	}
	if ($allseqmode) {
	  &print_seq;
	}
	elsif ($patseqmode) {
          if ($SeqID =~ /.*\|([^|]+)$/) {$SeqID=$1};
          foreach $line (@matches) {
	    $line =~ /(\S+)\s+(\S+)/;
 	    print ">$SeqID",':',"$1\n";
	    print "$2\n";
	  }
	}
	else {
          foreach $line (@matches) {print "Position  : $line\n"};
	  print "\n";
	}
      }
    }
  } until (eof(SEQFILE));
  close(SEQFILE);
  if ($htmlmode) {print "</pre>\n"};
